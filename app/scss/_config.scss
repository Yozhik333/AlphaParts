// USER VARIABLES SECTION

$accent: #fcc409; // Accent Color
$dark: #4d4d4d;
$blue: #054881;
$fontsize: 16px; // Body Font Size
$textcolor: #333; // Text Color
$system: -apple-system, BlinkMacSystemFont, Arial, sans-serif; // System Font Family
$roboto: Roboto, sans-serif; // Roboto Font Family

// Bootstrap compatible gutter variable => $gutter
$grid-gutter-width: 20px;
$gutter: $grid-gutter-width;

// IMPORT SECTION

@import "node_modules/bootstrap/scss/bootstrap-reboot.scss"; // Bootstrap Reboot collection
@import "node_modules/bootstrap/scss/mixins/_breakpoints.scss"; // Bootstrap Breakpoints mixin
@import "node_modules/bootstrap/scss/bootstrap-grid.scss"; // Optional Bootstrap Grid
// @import 'node_modules/bootstrap/scss/utilities/_sizing.scss'; // Optional Bootstrap Utilites

@media (min-width: 1200px) {
	.container-xl {
		max-width: 1620px;
	}
}

// FONTS LOAD SECTION

@mixin font($fname, $fstyle, $fweight, $furl) {
	@font-face {
		font-family: $fname;
		font-style: $fstyle;
		font-weight: $fweight;
		// font-display: swap; // Uncomment to initially display system fonts
		src: local($fname), url($furl) format("woff2");
	}
}

@include font("Roboto", normal, 400, "../fonts/roboto-regular-webfont.woff2");
@include font("Roboto", italic, 400, "../fonts/roboto-italic-webfont.woff2");
@include font("Roboto", normal, 700, "../fonts/roboto-bold-webfont.woff2");
@include font("Roboto", italic, 700, "../fonts/roboto-bolditalic-webfont.woff2");

// GENERAL DOCUMENT STYLES

::placeholder {
	color: #666;
}

::selection {
	background-color: $accent;
	color: #fff;
}

input,
textarea {
	outline: none;
	&:focus:required:invalid {
		border-color: red;
	}
	&:required:valid {
		border-color: green;
	}
}

body {
	font-family: $roboto;
	font-size: $fontsize;
	min-width: 320px;
	position: relative;
	line-height: 1.65;
	overflow-x: hidden;
	color: $textcolor;
}

@function fs($f-min, $f-max, $w-min, $w-max, $units: px) {
	$f-min: strip-unit($f-min);
	$f-max: strip-unit($f-max);
	$w-min: strip-unit($w-min);
	$w-max: strip-unit($w-max);

	$k: ($f-max - $f-min)/ ($w-max - $w-min);
	$b: $f-min - $k * $w-min;

	$b: $b + $units;

	@return calc(#{$k} * 100vw + #{$b});
}

// миксин для отзывчивых размеров, нужно создать разных отсьупов
@mixin fluidFontSize($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	font-size: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			font-size: $fallback;
		}
		font-size: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		font-size: $f-max;
	}
}

// миксин для отзывчивых width
@mixin fluidWidth($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	width: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			width: $fallback;
		}
		width: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		width: $f-max;
	}
}

// миксин для отзывчивых padding
@mixin fluidPadding($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	padding: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding: $fallback;
		}
		padding: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		padding: $f-max;
	}
}

// миксин для отзывчивых paddingTop
@mixin fluidPaddingTop($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	padding-top: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding: $fallback;
		}
		padding-top: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		padding-top: $f-max;
	}
}

// миксин для отзывчивых paddingLeft
@mixin fluidPaddingLeft($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	padding-left: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding: $fallback;
		}
		padding-left: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		padding-left: $f-max;
	}
}

// миксин для отзывчивых paddingRight
@mixin fluidPaddingRight($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	padding-right: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding: $fallback;
		}
		padding-right: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		padding-right: $f-max;
	}
}

// миксин для отзывчивых paddingRight
@mixin fluidPaddingBottom($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	padding-bottom: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding: $fallback;
		}
		padding-bottom: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		padding-bottom: $f-max;
	}
}

// миксин для отзывчивых paddingRight
@mixin fluidMarginRight($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	margin-right: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding: $fallback;
		}
		margin-right: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		margin-right: $f-max;
	}
}

// миксин для отзывчивых paddingRight
@mixin fluidMarginTop($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	margin-top: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			margin: $fallback;
		}
		margin-top: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		margin-top: $f-max;
	}
}

// mixin
@mixin fluidMarginBottom($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	margin-bottom: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			margin: $fallback;
		}
		margin-bottom: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		margin-bottom: $f-max;
	}
}

// mixin
@mixin fluidHeight($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	height: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			margin: $fallback;
		}
		height: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		height: $f-max;
	}
}

.fluid-font-size {
	@include fluidFontSize(16px, 24px, 480px, 1280px, 18px);
}
