@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

@function fs($f-min, $f-max, $w-min, $w-max, $units: px) {
	$f-min: strip-unit($f-min);
	$f-max: strip-unit($f-max);
	$w-min: strip-unit($w-min);
	$w-max: strip-unit($w-max);

	$k: ($f-max - $f-min)/ ($w-max - $w-min);
	$b: $f-min - $k * $w-min;

	$b: $b + $units;

	@return calc(#{$k} * 100vw + #{$b});
}

@mixin fluidFontSize($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	font-size: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			font-size: $fallback;
		}
		font-size: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		font-size: $f-max;
	}
}

// миксин для отзывчивых width
@mixin fluidWidth($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	width: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			width: $fallback;
		}
		width: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		width: $f-max;
	}
}

// миксин для отзывчивых height
@mixin fluidHeight($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	height: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			height: $fallback;
		}
		height: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		height: $f-max;
	}
}

// миксин для отзывчивых marginRight
@mixin fluidMarginRight($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	margin-right: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			margin-right: $fallback;
		}
		margin-right: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		margin-right: $f-max;
	}
}

// миксин для отзывчивых marginTop
@mixin fluidMarginTop($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	margin-top: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			margin-top: $fallback;
		}
		margin-top: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		margin-top: $f-max;
	}
}

// миксин для отзывчивых paddingRight
@mixin fluidPaddingRight($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	padding-right: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding-right: $fallback;
		}
		padding-right: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		padding-right: $f-max;
	}
}

// миксин для отзывчивых paddingLeft
@mixin fluidPaddingLeft($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	padding-left: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding-left: $fallback;
		}
		padding-left: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		padding-left: $f-max;
	}
}

// миксин для отзывчивых paddingTop
@mixin fluidPaddingTop($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	padding-top: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding-top: $fallback;
		}
		padding-top: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		padding-top: $f-max;
	}
}

// миксин для отзывчивых paddingBottom
@mixin fluidPaddingBottom($f-min, $f-max, $w-min, $w-max, $fallback: false) {
	padding-bottom: $f-min;

	@media (min-width: $w-min) {
		@if ($fallback) {
			padding-bottom: $fallback;
		}
		padding-bottom: fs($f-min, $f-max, $w-min, $w-max, px);
	}
	@media (min-width: $w-max) {
		padding-bottom: $f-max;
	}
}
